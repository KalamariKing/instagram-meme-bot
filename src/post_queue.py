"""post queue and cooldown"""

import os
from time import time
from random import randint

from instagrapi import Client

from config import (
    POST_DELAY_MIN_SECONDS, POST_DELAY_MAX_SECONDS
)

from src.shell import Shell, get_shell

class PostQueue:
    def __init__(self, client: Client, shell: Shell = None):
        self.queue = []
        self.client = client
        self.last_post = 0
        self._cooldown = 0
        self.generate_new_cooldown()
        self.shell = get_shell() if shell is None else shell
    
    def generate_new_cooldown(self) -> None:
        self._cooldown = randint(POST_DELAY_MIN_SECONDS, POST_DELAY_MAX_SECONDS)
        self.shell.log("New post cooldown", self.shell.highlight(self._cooldown), "seconds")
    
    def add(self, path) -> (bool, object):
        if path in self.queue: return False, "already in queue"
        self.queue.append(path)
        return True, None

    @staticmethod
    def parse_path(filename) -> (str, str, str):
        if filename.count("/") > 0:
            *folder, filename = filename.split("/")
            folder = "/".join(folder)
        else: folder = ""
        if filename.count(".") > 0:
            *filename, filefmt = filename.split(".")
            filename = ".".join(filename)
        else: filefmt = ""
        return (folder, filename, filefmt)
    
    def time_since_last_post(self):
        return int(time()) - self.last_post
    
    
    def get_next_filename(self):
        return self.queue[0]

    def post(self, *args, **kwargs) -> (bool, object):
        if len(self.queue) == 0: return False, "nothing to post"
        if self.get_cooldown() > 0: return False, "on cooldown"
        path = self.queue.pop(0)
        (folder, filename, filefmt) = self.__class__.parse_path(path)

        self.shell.log("Posting", path)
        self.shell.debug("|  Attempting to upload", path)
        if filefmt == "jpg": media = self.client.photo_upload(path, *args, **kwargs)
        elif filefmt == "mp4": media = self.client.video_upload(path, *args, **kwargs)
        else: return False, "invalid mime type"

        data = media.dict()
        self.shell.success("Posted", self.shell.highlight(filename+'.'+filefmt), "at", data["taken_at"].strftime("%I:%M on %b %-d"))
        data["filename"] = filename
        data["media_type"] = filefmt
        
        self.shell.debug("|  Moving to discard folder...")
        os.rename(path, "discard/"+filename+"."+filefmt)
        if filefmt == "mp4": os.remove(path+".jpg") # delete autogenerated thumbnail
        
        self.last_post = int(time())
        self.generate_new_cooldown()
        return True, data
    
    @property
    def cooldown(self):
        return max(0, self._cooldown-self.time_since_last_post())
    
    def __len__(self) -> int:
        return len(self.queue)

    def __repr__(self) -> str:
        return f"<PostQueue length={self.length()} {str(self.queue)}>"
    
    def __str__(self) -> str:
        return self.__str__()